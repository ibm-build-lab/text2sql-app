{
  "name": "Sequifi-action",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2024-07-30T16:46:39.170Z",
  "updated": "2024-09-25T22:08:17.544Z",
  "language": "en",
  "skill_id": "63e637b5-6e2d-41fc-a6e9-fd72c8575394",
  "workspace": {
    "actions": [
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_976",
            "title": "Save input text",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_976",
            "next_step": "step_311"
          },
          {
            "step": "step_311",
            "title": "For debug: print out user id",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "User: "
                          },
                          {
                            "skill_variable": "user_id"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": []
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_311",
            "condition": {
              "eq": [
                {
                  "skill_variable": "debug"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_622"
          },
          {
            "step": "step_622",
            "title": "Classify the query as sql or unknown",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/classify",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "c9a847fc080768a2806c9361e26ded7000672846313654dc5ef7bb8115c45cf3",
                  "match_scenario": 10,
                  "catalog_item_id": "3f334aec-a907-475f-acaf-88ddbee764f5"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "scalar": "meta-llama/llama-3-1-8b-instruct"
                      },
                      "parameter": "llm_params.model_id"
                    }
                  ]
                },
                "result_variable": "step_622_result_1"
              }
            },
            "variable": "step_622",
            "next_step": "step_930"
          },
          {
            "step": "step_930",
            "title": "For Debug: print out classify results",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Question is classified as : "
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_930",
            "condition": {
              "eq": [
                {
                  "skill_variable": "debug"
                },
                {
                  "scalar": true
                }
              ]
            },
            "next_step": "step_194"
          },
          {
            "step": "step_194",
            "title": "If query classified as sql, call texttosql api",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/texttosql",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "686c6c9c109641371ee476c88054f65789e999746082a02bc9fd8b534f8153b2",
                  "match_scenario": 10,
                  "catalog_item_id": "3f334aec-a907-475f-acaf-88ddbee764f5"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "scalar": "MYSQL"
                      },
                      "parameter": "dbtype"
                    },
                    {
                      "value": {
                        "skill_variable": "user_id"
                      },
                      "parameter": "user_id"
                    }
                  ]
                },
                "result_variable": "step_194_result_1"
              }
            },
            "variable": "step_194",
            "condition": {
              "contains": [
                {
                  "variable": "step_622_result_1",
                  "variable_path": "body.response"
                },
                {
                  "scalar": "sqlgen",
                  "options": {
                    "ignore_case": true
                  }
                }
              ]
            },
            "next_step": "step_208"
          },
          {
            "step": "step_208",
            "title": "For Debug, print out full response from text2sql api",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Full Response: "
                          },
                          {
                            "variable": "step_194_result_1",
                            "variable_path": "body.response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.sql_query"
                  },
                  "skill_variable": "response_sql_query"
                },
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.result"
                  },
                  "skill_variable": "response_result"
                },
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.result.extract(\"\\[(?:\\{aggregate:)(\\d{3}\\.\\d+)(?:\\}\\])\",1)"
                  },
                  "skill_variable": "cleaned_answer"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_208",
            "condition": {
              "and": [
                {
                  "contains": [
                    {
                      "variable": "step_622_result_1",
                      "variable_path": "body.response"
                    },
                    {
                      "scalar": "sqlgen",
                      "options": {
                        "ignore_case": true
                      }
                    }
                  ]
                },
                {
                  "eq": [
                    {
                      "skill_variable": "debug"
                    },
                    {
                      "scalar": true
                    }
                  ]
                }
              ]
            },
            "next_step": "step_131"
          },
          {
            "step": "step_131",
            "title": "Print out results from texttosql api",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "SQL Query: "
                          },
                          {
                            "skill_variable": "response_sql_query"
                          },
                          {
                            "scalar": "\n\n<br />\n\n\n\nFull Answer: "
                          },
                          {
                            "skill_variable": "response_result"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.sql_query"
                  },
                  "skill_variable": "response_sql_query"
                },
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.result"
                  },
                  "skill_variable": "response_result"
                },
                {
                  "value": {
                    "expression": "${step_194_result_1.body.response}.result.extract(\"\\[(?:\\{aggregate:)(\\d{3}\\.\\d+)(?:\\}\\])\",1)"
                  },
                  "skill_variable": "cleaned_answer"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_131",
            "condition": {
              "contains": [
                {
                  "variable": "step_622_result_1",
                  "variable_path": "body.response"
                },
                {
                  "scalar": "sqlgen",
                  "options": {
                    "ignore_case": true
                  }
                }
              ]
            },
            "next_step": "step_810"
          },
          {
            "step": "step_810",
            "title": "Pass results to Sequifi web hook",
            "context": {
              "variables": []
            },
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/public/api/ibm_watson_webhook",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "bcd6bfae05c81faa082ea500b7bcbc48e86e3f1c80693e54c03a21a071dd4e3d",
                  "match_scenario": 10,
                  "catalog_item_id": "5761d30f-cf67-411c-9b0d-f904b8ed6bc5"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "variable": "step_194_result_1",
                        "variable_path": "body.response"
                      },
                      "parameter": "input"
                    }
                  ]
                },
                "result_variable": "step_810_result_1"
              }
            },
            "variable": "step_810",
            "condition": {
              "and": [
                {
                  "contains": [
                    {
                      "variable": "step_622_result_1",
                      "variable_path": "body.response"
                    },
                    {
                      "scalar": "sqlgen",
                      "options": {
                        "ignore_case": true
                      }
                    }
                  ]
                },
                {
                  "contains": [
                    {
                      "variable": "step_194_result_1",
                      "variable_path": "body.response"
                    },
                    {
                      "scalar": "True",
                      "options": {
                        "ignore_case": true
                      }
                    }
                  ]
                }
              ]
            },
            "next_step": "step_721"
          },
          {
            "step": "step_721",
            "title": "Query is classified as unknown, prompt user for another question",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "This question is out of the scope of this AI Assistant.  Do you want to ask a new SQL-related question?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential",
                  "repeat_on_reprompt": false
                },
                {
                  "options": [
                    {
                      "label": "Yes",
                      "value": {
                        "input": {
                          "text": "Yes"
                        }
                      }
                    },
                    {
                      "label": "No",
                      "value": {
                        "input": {
                          "text": "No"
                        }
                      }
                    }
                  ],
                  "response_type": "option",
                  "repeat_on_reprompt": true
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text_expression": {
                            "concat": [
                              {
                                "scalar": "I didn't catch that. Select a valid option:"
                              }
                            ]
                          }
                        }
                      ],
                      "response_type": "text",
                      "selection_policy": "incremental"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "entity": "entity_5268",
              "max_tries": 3
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_721",
            "condition": {
              "contains": [
                {
                  "variable": "step_622_result_1",
                  "variable_path": "body.response"
                },
                {
                  "scalar": "unknown",
                  "options": {
                    "ignore_case": true
                  }
                }
              ]
            },
            "next_step": "step_719"
          },
          {
            "step": "step_719",
            "title": "If yes, request new query",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "What is your new question?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "question": {
              "free_text": true
            },
            "resolver": {
              "type": "replay",
              "clear": [
                {
                  "variable": "step_976"
                },
                {
                  "variable": "step_622"
                },
                {
                  "variable": "step_930"
                },
                {
                  "variable": "step_194"
                },
                {
                  "variable": "step_208"
                },
                {
                  "variable": "step_810"
                },
                {
                  "variable": "step_721"
                }
              ]
            },
            "variable": "step_719",
            "condition": {
              "eq": [
                {
                  "variable": "step_721"
                },
                {
                  "value": "Yes",
                  "from_entity": "entity_5268"
                }
              ]
            },
            "next_step": "step_610"
          },
          {
            "step": "step_610",
            "title": "If no, complete the flow",
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_610",
            "condition": {
              "eq": [
                {
                  "variable": "step_721"
                },
                {
                  "value": "No",
                  "from_entity": "entity_5268"
                }
              ]
            }
          }
        ],
        "title": "SQL generation",
        "action": "action_24095",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919"
        },
        "variables": [
          {
            "title": "Print out results from texttosql api",
            "privacy": {
              "enabled": true
            },
            "variable": "step_131",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_194",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_194_result_1",
            "data_type": "any"
          },
          {
            "title": "Print out results from texttosql api",
            "privacy": {
              "enabled": true
            },
            "variable": "step_208",
            "data_type": "any"
          },
          {
            "title": "Save input text",
            "privacy": {
              "enabled": true
            },
            "variable": "step_311",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_610",
            "data_type": "any"
          },
          {
            "title": "Classify the query as sql or unknown",
            "privacy": {
              "enabled": false
            },
            "variable": "step_622",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_622_result_1",
            "data_type": "any"
          },
          {
            "title": "If yes, request new query",
            "privacy": {
              "enabled": true
            },
            "variable": "step_719",
            "data_type": "any"
          },
          {
            "title": "This question is out of the scope of this AI Assistant. Do you w",
            "privacy": {
              "enabled": false
            },
            "variable": "step_721",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_810",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_810_result_1",
            "data_type": "any"
          },
          {
            "title": "Question is classified as : {variable}",
            "privacy": {
              "enabled": false
            },
            "variable": "step_930",
            "data_type": "any"
          },
          {
            "title": "Save input text",
            "privacy": {
              "enabled": false
            },
            "variable": "step_976",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_558",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "action_24095",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_558_result_1"
              }
            },
            "variable": "step_558",
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. Please rephrase your question."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001",
            "condition": {
              "lte": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": ""
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "fallback",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_002_result_1"
              }
            },
            "variable": "step_002",
            "condition": {
              "gt": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            }
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "I am afraid I do not understand what you are asking, please re-p",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "variable": "step_002_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_558",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_558_result_1",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. I can connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I am afraid I do not understand what you are asking, let me connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "I'm afraid I don't understand. I can connect you to an agent.",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "I am afraid I do not understand what you are asking, let me conn",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Welcome, how can I assist you?"
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_24095",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_24095_intent_10919",
        "examples": [
          {
            "text": "I have a question"
          }
        ]
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "entity_17250",
        "values": [
          {
            "type": "patterns",
            "value": "Regular_expression",
            "patterns": [
              "\"^(?:.*[a-z])(?:.*[A-Z])(?:.*\\d)(?:.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\""
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_25899",
        "values": [
          {
            "type": "patterns",
            "value": "Email",
            "patterns": [
              "\\b(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\b"
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_5268",
        "values": [
          {
            "type": "synonyms",
            "value": "No",
            "synonyms": []
          },
          {
            "type": "synonyms",
            "value": "Yes",
            "synonyms": []
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-currency",
        "values": []
      },
      {
        "entity": "sys-date",
        "values": []
      },
      {
        "entity": "sys-number",
        "values": []
      },
      {
        "entity": "sys-percentage",
        "values": []
      },
      {
        "entity": "sys-time",
        "values": []
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "cleaned_answer",
        "privacy": {
          "enabled": false
        },
        "variable": "cleaned_answer",
        "data_type": "any",
        "description": "Streamlined answer using regex"
      },
      {
        "title": "debug",
        "privacy": {
          "enabled": false
        },
        "variable": "debug",
        "data_type": "boolean",
        "description": "",
        "initial_value": {
          "scalar": true
        }
      },
      {
        "title": "query_text",
        "privacy": {
          "enabled": false
        },
        "variable": "query_text",
        "data_type": "string",
        "description": "Query sent into api"
      },
      {
        "title": "response_result",
        "privacy": {
          "enabled": false
        },
        "variable": "response_result",
        "data_type": "string",
        "description": "result field from texttosql response"
      },
      {
        "title": "response_sql_query",
        "privacy": {
          "enabled": false
        },
        "variable": "response_sql_query",
        "data_type": "string",
        "description": "sql_query field from texttosql response"
      },
      {
        "title": "user_id",
        "privacy": {
          "enabled": false
        },
        "variable": "user_id",
        "data_type": "string",
        "description": "Id (string) of user logged into Sequifi system.  This will get replaced by embed code.",
        "initial_value": {
          "scalar": "12"
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "topic_switch": {
        "enabled": true,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": true,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": true
    },
    "learning_opt_out": true
  },
  "description": "created for assistant 1c76effb-2430-4334-8897-6cdad3c6282b",
  "assistant_id": "65d27456-5859-45a7-b168-e0e26f774bd2",
  "workspace_id": "63e637b5-6e2d-41fc-a6e9-fd72c8575394",
  "dialog_settings": {},
  "next_snapshot_version": "1",
  "environment_id": "52431cc0-710a-4c35-8403-31e5ea73470f"
}

